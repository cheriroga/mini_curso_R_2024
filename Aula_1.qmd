---
title: "Aula 1 Mini curso R"
author: " CONSTAT - Consultoria Estatítica"
date: "2024-12-03"
format: 
  revealjs:
    transition: slide
    theme: "simple"
    css: styles.css
    background-image: "images/template.png"
    slide_number: true
    code_block_background: false
fontsize: 25px
editor: visual
---

# Apresentação da CONSTAT e curso R

## CONSTAT

Somos a Empresa Júnior do Curso de Graduação em Estatística da UFES, que tem como finalidade proporcionar a seus membros as condições necessárias para a aplicação prática de

conhecimentos teóricos relativos ao curso de Estatística e a toda área de formação, promover uma vivência empresarial e desenvolver as habilidades empreendedoras dos estudantes, sob a missão de transformar dados em resultados.

-   Contato: constatufes\@gmail.com

## Serviços prestados

-   Engenharia de dados;

-   Modelo de regressão preditivo;

-   Censos de qualquer natureza;

-   Pesquisa de mercado;

-   Limpeza de dados;

-   Análise descritiva;

-   Planejamento amostral;

-   Análise de regressão.

------------------------------------------------------------------------

## Curso R

### Estrutura das aulas

1.  Teoria;

2.  Exercícios;

3.  Dúvidas lista/ aula anterior.

### Trabalho e certificado

O certificado será liberado após a entrega do trabalho.

**Trabalho**

O trabalho consiste em entregar uma análise de um banco de dados usando os ítens aprendidos em aula.

# Introdução ao R e ao RStudio

-   **R**: Linguagem de programação focada em análise estatística e ciência de dados, além de um ambiente de software gratuito.

-   Saiba mais em: [r-project.org](https://www.r-project.org/about.html)

-   **RStudio**: Ambiente de desenvolvimento integrado (IDE) para R.

-   O R, em combinação com o RStudio, possui um conjunto de funcionalidades cuja intenção é ajudar no processo de desenvolvimento

-   **Recursos**: Scripts, pacotes, visualizações, Interface amigável para programadores e estatísticos.

-   Saiba mais em: <https://rstudio.com/>

------------------------------------------------------------------------

## Utilização do RStudio

-   Criação análises;

-   Rmarkdown: Relatórios em PDF, HTML, Word;

-   Quarto: Apresentações em PDF, HTML;

-   Shiny: dashboard;

-   Outros.

## R

![](images/Captura%20de%20tela%202024-12-03%20143747.png){fig-align="center"}

## RStudio

![](images/Captura%20de%20tela%202024-12-03%20143909.png){fig-align="center"}

## Telas

-   **Editor/Scripts**: É onde escrever os códigos. Arquivos do tipo .R.

-   **Console**: Executar os comandos e ver os resultados.

-   **Enviroment**: Painel com todos os objetos criados.

-   **History**: História dos comandos executados.

-   **Files**: Navegar em pastas e arquivos.

-   **Plots**: Onde os gráficos serão apresentados.

-   **Packages**: Pacotes instalados (sem ticar) e habilitados (ticados).

-   **Help**: Retorna o tutorial de ajuda do comando solicitado com help() ou ?comando. Veremos melhor como pedir ajuda no R ainda nessa aula.

## Back-end VS Front-end

**Front-end** é a parte que os usuários veem e interagem, **back-end** é a parte que faz o programa funcionar

```{r, echo=FALSE, out.width="45%", fig.align='default'}
library(knitr)
include_graphics(c("front_end.png", "back_end.png"))
```

# Boas práticas

-   Comente bem o seu código: É possível fazer comentários usando o símbolo ‘#’. É sempre bom explicar o que uma variável armazena, o que uma função faz, porque alguns parâmetros são passados para uma determinada função, qual é o objetivo de um trecho de código, etc.

-   Evite linhas de código muito longas: Usar linhas de código mais curtas ajuda na leitura do código.

-   Escreva um código organizado: Por exemplo, adote um padrão no uso de minúsculas e maiúsculas, uma lógica única na organização de pastas e arquivos, pode ser adotada uma breve descrição (como comentário) indicando o que um determinado script faz.

-   Carregue todos os pacotes que irá usar sempre no início do arquivo: Quando alguém abrir o seu código será fácil identificar quais são os pacotes que devem ser instalados e quais dependências podem existir.

-   Evite referência de caminho que considere seu computador ou usuário: Faça referência ao caminho do projeto.

# Criando um projeto:

No RStudio, para criar um projeto, clique no Menu `File,` deopis em `New Project...` . Na caixa de diálogo que aparecerá, clique em `New Directory` para criar o projeto em uma nova pasta ou `Existing Directory` para criar em uma pasta existente.

Criando um projeto, o RStudio criará na pasta escolhida um arquivo `nome-do-projeto.Rproj`

[**Exemplificando.....**]{.underline}

# Atalhos no RStudio

-   **CTRL+ENTER**: roda a(s) linha(s) selecionada(s) no script. O atalho mais utilizado.

-   **ALT+-**: cria no script um sinal de atribuição (\<-). Você o usará o tempo todo.

-   **CTRL+SHIFT+M**: (%\>%) operador *pipe*.

-   **CTRL+1**: altera cursor para o script.

-   **CTRL+2**: altera cursor para o console.

-   **CTRL+ALT+I**: cria um chunk no R Markdown.

-   **CTRL+SHIFT+K**: compila um arquivo no R Markdown.

-   [**ALT+SHIFT+K**]{.underline}: janela com todos os atalhos disponíveis.

# Tipos de dados

-   **Numeric**: números que podem ser tanto inteiros quanto decimais. (5; 3.2; 6.8)

-   **Integer**: Especificamente números inteiros.(1, 2, 7)

-   **Character**: Representa textos ou cadeias de caracteres. ("CONSTAT", "2", "UFES")

-   **Logical**: Representa valores booleanos, TRUE ou FALSE.

# R como Calculadora

**O R pode realizar operações matemáticas básicas**:

```{r, echo=TRUE}
#Soma
2 + 2 

#Subtração
5 - 3 

#Multiplicação
3 * 3 

#Divisão
10 / 2 

# potência
4 ^ 2

# resto da divisão de 5 por 3
5 %% 3

# parte inteira da divisão de 5 por 3
5 %/% 3 
```

------------------------------------------------------------------------

# Atribuição

"Guardar" ítens e/ou valores em objetos

Para criar um objeto, utilizamos o operador `<-` (Alt-)

```{r, echo=TRUE}
#Atribuição usando "<-"
x <- 10
x

#Atribuição usando "="
y = 20
y

#Soma dos valores atribuídos
x + y

```

**Atenção!**

O R **diferencia letras maiúsculas e minúsculas**, isto é, `b` é considerado um objeto diferente de `B`

------------------------------------------------------------------------

## Objetos em R

Existem cinco classes básicas no R:

-   character: "UAH!"

-   numeric: 0.95 (números reais)

-   integer: 100515 (inteiros)

-   complex: 2 + 5i (números complexos, a + bi)

-   logical: TRUE (booleanos, TRUE/FALSE)

## Exemplo

Vamos atribuir a x a string banana.

```         
x <- banana
```

```         
Erro: objeto 'banana' não encontrado
```

```         
x <- "banana"
x
```

```         
[1] "banana"
```

# Função

A sintaxe para usar uma função é a seguinte:

```         
nome_da_funcao(arg1, arg2, argn)
```

Cada função tem sua própia sintaxe, para saber mais, basta usar o help

## Função class()

```{r, echo=TRUE}
y <- "ola"

class(y)
```

```{r, echo=TRUE}
x <- 2.5

class(x)
```

## Exemplo

```{r, echo=TRUE}
sum(1, 2) 
```

```{r, echo=TRUE}
numeros <- c(10, 20, 30, 40) 

mean(numeros) 

```

```{r, echo=TRUE}
frutas <- c("Maçã", "Banana", "Laranja", "Uva")
# Complete o código abaixo:
qtd <- length(frutas)
print(qtd)

```

```{r, echo=TRUE}
animais <- c("Gato", "Cachorro", "Gato", "Passarinho", "Gato", "Cachorro")
# Complete o código:
frequencia <- table(animais)
print(frequencia)

```

# Classificação dos dados

## **Numérico (numeric)**

```{r, echo=TRUE}
x <- 4.5 # O . é o separador decimal
x

class(x)
is.numeric(x) # Confere se o objeto é um da classe numeric

y<-1E4 # Notação científica
y

class(y)

is.numeric(y) 

```

## **Caracter (character)**

```{r, echo=TRUE}
x <- "floresta" # Sempre entre aspas 
x 
class(x) 
is.character(x) 

y <- "Diversidade (Simpson)" # Pode conter espaços ou acentos 
y 
class(y) 
is.character(y) 
```

## **Lógico (logical)**

```{r, echo=TRUE}
x <- TRUE # Não precisa estar entre aspas, é uma palavra especial no R
x

class(x)

is.logical(x) # Confere se o objeto é um da classe logical

y <- F # Pode ser abreviada
y

class(y)

is.logical(y)

```

# Atividade

Diga por que esses códigos deram erro

1\)

```         
x <- "Constat"

X
```

```         
Erro: objeto 'X' não encontrado 
```

2\)

```         
resultado <- sum(1, 2, "3")
```

```         
Error in sum(1, 2, "3") : 'type' inválido (character) do argumento
```

3\) Atribua o ano em que nasceu e o ano atual a objetos e descubra sua idade;

4\) Escreva o código que resolva a equação y=3x + 5 para x=4 e depois altere o valor de x para sua idade.

------------------------------------------------------------------------

# Agradecimentos

Obrigado pela participação e nos vemos na próxima aula. não esqueça de nos seguir nas redes sociais.

------------------------------------------------------------------------
