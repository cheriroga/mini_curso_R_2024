[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mini Curso R",
    "section": "",
    "text": "Slide 1\nSlide 2\nSlide 3"
  },
  {
    "objectID": "Aula_1.html#constat",
    "href": "Aula_1.html#constat",
    "title": "Aula 1 Mini curso R",
    "section": "CONSTAT",
    "text": "CONSTAT\nSomos a Empresa Júnior do Curso de Graduação em Estatística da UFES, que tem como finalidade proporcionar a seus membros as condições necessárias para a aplicação prática de\nconhecimentos teóricos relativos ao curso de Estatística e a toda área de formação, promover uma vivência empresarial e desenvolver as habilidades empreendedoras dos estudantes, sob a missão de transformar dados em resultados.\n\nContato: constatufes@gmail.com"
  },
  {
    "objectID": "Aula_1.html#serviços-prestados",
    "href": "Aula_1.html#serviços-prestados",
    "title": "Aula 1 Mini curso R",
    "section": "Serviços prestados",
    "text": "Serviços prestados\n\nEngenharia de dados;\nModelo de regressão preditivo;\nCensos de qualquer natureza;\nPesquisa de mercado;\nLimpeza de dados;\nAnálise descritiva;\nPlanejamento amostral;\nAnálise de regressão."
  },
  {
    "objectID": "Aula_1.html#curso-r",
    "href": "Aula_1.html#curso-r",
    "title": "Aula 1 Mini curso R",
    "section": "Curso R",
    "text": "Curso R\nEstrutura das aulas\n\nTeoria;\nExercícios;\nDúvidas lista/ aula anterior.\n\nTrabalho e certificado\nO certificado será liberado após a entrega do trabalho.\nTrabalho\nO trabalho consiste em entregar uma análise de um banco de dados usando os ítens aprendidos em aula."
  },
  {
    "objectID": "Aula_1.html#utilização-do-rstudio",
    "href": "Aula_1.html#utilização-do-rstudio",
    "title": "Aula 1 Mini curso R",
    "section": "Utilização do RStudio",
    "text": "Utilização do RStudio\n\nCriação análises;\nRmarkdown: Relatórios em PDF, HTML, Word;\nQuarto: Apresentações em PDF, HTML;\nShiny: dashboard;\nOutros."
  },
  {
    "objectID": "Aula_1.html#r",
    "href": "Aula_1.html#r",
    "title": "Aula 1 Mini curso R",
    "section": "R",
    "text": "R"
  },
  {
    "objectID": "Aula_1.html#rstudio",
    "href": "Aula_1.html#rstudio",
    "title": "Aula 1 Mini curso R",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "Aula_1.html#telas",
    "href": "Aula_1.html#telas",
    "title": "Aula 1 Mini curso R",
    "section": "Telas",
    "text": "Telas\n\nEditor/Scripts: É onde escrever os códigos. Arquivos do tipo .R.\nConsole: Executar os comandos e ver os resultados.\nEnviroment: Painel com todos os objetos criados.\nHistory: História dos comandos executados.\nFiles: Navegar em pastas e arquivos.\nPlots: Onde os gráficos serão apresentados.\nPackages: Pacotes instalados (sem ticar) e habilitados (ticados).\nHelp: Retorna o tutorial de ajuda do comando solicitado com help() ou ?comando. Veremos melhor como pedir ajuda no R ainda nessa aula."
  },
  {
    "objectID": "Aula_1.html#back-end-vs-front-end",
    "href": "Aula_1.html#back-end-vs-front-end",
    "title": "Aula 1 Mini curso R",
    "section": "Back-end VS Front-end",
    "text": "Back-end VS Front-end\nFront-end é a parte que os usuários veem e interagem, back-end é a parte que faz o programa funcionar"
  },
  {
    "objectID": "Aula_1.html#objetos-em-r",
    "href": "Aula_1.html#objetos-em-r",
    "title": "Aula 1 Mini curso R",
    "section": "Objetos em R",
    "text": "Objetos em R\nExistem cinco classes básicas no R:\n\ncharacter: “UAH!”\nnumeric: 0.95 (números reais)\ninteger: 100515 (inteiros)\ncomplex: 2 + 5i (números complexos, a + bi)\nlogical: TRUE (booleanos, TRUE/FALSE)"
  },
  {
    "objectID": "Aula_1.html#exemplo",
    "href": "Aula_1.html#exemplo",
    "title": "Aula 1 Mini curso R",
    "section": "Exemplo",
    "text": "Exemplo\nVamos atribuir a x a string banana.\nx &lt;- banana\nErro: objeto 'banana' não encontrado\nx &lt;- \"banana\"\nx\n[1] \"banana\""
  },
  {
    "objectID": "Aula_1.html#função-class",
    "href": "Aula_1.html#função-class",
    "title": "Aula 1 Mini curso R",
    "section": "Função class()",
    "text": "Função class()\n\ny &lt;- \"ola\"\n\nclass(y)\n\n[1] \"character\"\n\n\n\nx &lt;- 2.5\n\nclass(x)\n\n[1] \"numeric\""
  },
  {
    "objectID": "Aula_1.html#exemplo-1",
    "href": "Aula_1.html#exemplo-1",
    "title": "Aula 1 Mini curso R",
    "section": "Exemplo",
    "text": "Exemplo\n\nsum(1, 2) \n\n[1] 3\n\n\n\nnumeros &lt;- c(10, 20, 30, 40) \n\nmean(numeros) \n\n[1] 25\n\n\n\nfrutas &lt;- c(\"Maçã\", \"Banana\", \"Laranja\", \"Uva\")\n# Complete o código abaixo:\nqtd &lt;- length(frutas)\nprint(qtd)\n\n[1] 4\n\n\n\nanimais &lt;- c(\"Gato\", \"Cachorro\", \"Gato\", \"Passarinho\", \"Gato\", \"Cachorro\")\n# Complete o código:\nfrequencia &lt;- table(animais)\nprint(frequencia)\n\nanimais\n  Cachorro       Gato Passarinho \n         2          3          1"
  },
  {
    "objectID": "Aula_1.html#numérico-numeric",
    "href": "Aula_1.html#numérico-numeric",
    "title": "Aula 1 Mini curso R",
    "section": "Numérico (numeric)",
    "text": "Numérico (numeric)\n\nx &lt;- 4.5 # O . é o separador decimal\nx\n\n[1] 4.5\n\nclass(x)\n\n[1] \"numeric\"\n\nis.numeric(x) # Confere se o objeto é um da classe numeric\n\n[1] TRUE\n\ny&lt;-1E4 # Notação científica\ny\n\n[1] 10000\n\nclass(y)\n\n[1] \"numeric\"\n\nis.numeric(y) \n\n[1] TRUE"
  },
  {
    "objectID": "Aula_1.html#caracter-character",
    "href": "Aula_1.html#caracter-character",
    "title": "Aula 1 Mini curso R",
    "section": "Caracter (character)",
    "text": "Caracter (character)\n\nx &lt;- \"floresta\" # Sempre entre aspas \nx \n\n[1] \"floresta\"\n\nclass(x) \n\n[1] \"character\"\n\nis.character(x) \n\n[1] TRUE\n\ny &lt;- \"Diversidade (Simpson)\" # Pode conter espaços ou acentos \ny \n\n[1] \"Diversidade (Simpson)\"\n\nclass(y) \n\n[1] \"character\"\n\nis.character(y) \n\n[1] TRUE"
  },
  {
    "objectID": "Aula_1.html#lógico-logical",
    "href": "Aula_1.html#lógico-logical",
    "title": "Aula 1 Mini curso R",
    "section": "Lógico (logical)",
    "text": "Lógico (logical)\n\nx &lt;- TRUE # Não precisa estar entre aspas, é uma palavra especial no R\nx\n\n[1] TRUE\n\nclass(x)\n\n[1] \"logical\"\n\nis.logical(x) # Confere se o objeto é um da classe logical\n\n[1] TRUE\n\ny &lt;- F # Pode ser abreviada\ny\n\n[1] FALSE\n\nclass(y)\n\n[1] \"logical\"\n\nis.logical(y)\n\n[1] TRUE"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Mini Curso R",
    "section": "",
    "text": "Slide 1\nSlide 2"
  },
  {
    "objectID": "index.html#atividades",
    "href": "index.html#atividades",
    "title": "Mini Curso R",
    "section": "Atividades",
    "text": "Atividades\nAtividade 1\nAtividade 2\nAtividade Final"
  },
  {
    "objectID": "Aula_2.html#revisão---tipos-de-dados",
    "href": "Aula_2.html#revisão---tipos-de-dados",
    "title": "Aula 2 Mini curso R",
    "section": "REVISÃO - TIPOS DE DADOS",
    "text": "REVISÃO - TIPOS DE DADOS\n● Numérico: armazena números, tanto inteiros quanto decimais (ponto flutuante).\nExemplo: x &lt;- 5\n● Inteiro (Integer): armazena números inteiros (sem casas decimais).\nExemplo: x &lt;- 5L (o “L” indica um número inteiro)\n● Double (Ponto Flutuante de Precisão Dupla): é usado para armazenar números com casas decimais.\nExemplo: x &lt;- 3.14\n● Lógico (Booleano): armazena valores lógicos, ou seja, TRUE ou FALSE. Usado para fazer verificações de condições ou representações binárias.\nExemplo: flag &lt;- TRUE\n● Caractere (String): armazena sequências de texto, ou seja, palavras ou frases. As strings são sempre cercadas por aspas, simples ou duplas.\nExemplo: name &lt;- “João” ou city &lt;- ‘São Paulo’."
  },
  {
    "objectID": "Aula_2.html#objetos-em-r",
    "href": "Aula_2.html#objetos-em-r",
    "title": "Aula 2 Mini curso R",
    "section": "OBJETOS em R",
    "text": "OBJETOS em R\nEm R, objetos são as estruturas de dados que armazenam informações, como números, textos, ou tabelas. Quase tudo em R é tratado como um objeto."
  },
  {
    "objectID": "Aula_2.html#principais-tipos-de-objetos",
    "href": "Aula_2.html#principais-tipos-de-objetos",
    "title": "Aula 2 Mini curso R",
    "section": "Principais tipos de objetos",
    "text": "Principais tipos de objetos\n● Vetores: Coleções de elementos do mesmo tipo (numérico, caractere, lógico, etc.);\n● Matrizes: Arranjos bidimensionais de elementos do mesmo tipo;\n● DataFrames: Tabelas onde cada coluna pode conter diferentes tipos de dados;\n● Listas: Coleções que podem conter diferentes tipos de objetos, como vetores, data frames e até outras listas;\n● Fatores: Usados para representar dados categóricos, como níveis de um fator;\n● Funções: Blocos de código armazenados como objetos que podem ser executados."
  },
  {
    "objectID": "Aula_2.html#características-dos-objetos",
    "href": "Aula_2.html#características-dos-objetos",
    "title": "Aula 2 Mini curso R",
    "section": "Características dos objetos",
    "text": "Características dos objetos\n● As atribuições vistas na aula anterior (&lt;- ou =) criam objetos;\n● Cada objeto tem classe (ex.: “numeric”, “data.frame”) e atributos (ex.: nomes de colunas em um data frame);\n● Podem ser manipulados com funções adequadas, como str(), class() e summary()."
  },
  {
    "objectID": "Aula_2.html#section",
    "href": "Aula_2.html#section",
    "title": "Aula 2 Mini curso R",
    "section": "",
    "text": "Objetos em R"
  },
  {
    "objectID": "Aula_2.html#data-structures",
    "href": "Aula_2.html#data-structures",
    "title": "Aula 2 Mini curso R",
    "section": "DATA STRUCTURES",
    "text": "DATA STRUCTURES\nAs estruturas de dados no R organizam e armazenam informações, sendo fundamentais para análise e manipulação de dados."
  },
  {
    "objectID": "Aula_2.html#principais-data-structures-no-r",
    "href": "Aula_2.html#principais-data-structures-no-r",
    "title": "Aula 2 Mini curso R",
    "section": "Principais Data Structures no R",
    "text": "Principais Data Structures no R\nVetores: sequência unidimensional de elementos do mesmo tipo (numérico, caractere, lógico, etc.). Formação: atribuição, c( , , ) ou seq( , ,by = ).\nExemplo:\n\nnumeros &lt;- c(10, 20, 30) # Vetor numérico"
  },
  {
    "objectID": "Aula_2.html#principais-data-structures-no-r-1",
    "href": "Aula_2.html#principais-data-structures-no-r-1",
    "title": "Aula 2 Mini curso R",
    "section": "Principais Data Structures no R",
    "text": "Principais Data Structures no R\nMatrizes: estrutura bidimensional com elementos do mesmo tipo. Formação: matrix(data = , nrow = , ncol = ). Exemplo:\n\n mat &lt;- matrix(1:6, nrow = 2)"
  },
  {
    "objectID": "Aula_2.html#principais-data-structures-no-r-2",
    "href": "Aula_2.html#principais-data-structures-no-r-2",
    "title": "Aula 2 Mini curso R",
    "section": "Principais Data Structures no R",
    "text": "Principais Data Structures no R\nData Frames: tabela onde as colunas podem conter diferentes tipos de dados. Formação: data.frame(). Exemplo:\n\ndf &lt;- data.frame(nome = c(\"Ana\", \"João\"), idade = c(25, 30))"
  },
  {
    "objectID": "Aula_2.html#principais-data-structures-no-r-3",
    "href": "Aula_2.html#principais-data-structures-no-r-3",
    "title": "Aula 2 Mini curso R",
    "section": "Principais Data Structures no R",
    "text": "Principais Data Structures no R\nListas: coleções de elementos de diferentes tipos e tamanhos, incluindo vetores, data frames e outras listas. Formação: list(). Exemplo:\n\nlst &lt;- list(vetor = c(1, 2), matriz = matrix(1:4, nrow = 2))"
  },
  {
    "objectID": "Aula_2.html#principais-data-structures-no-r-4",
    "href": "Aula_2.html#principais-data-structures-no-r-4",
    "title": "Aula 2 Mini curso R",
    "section": "Principais Data Structures no R",
    "text": "Principais Data Structures no R\nFatores: representam dados categóricos, armazenando os níveis de categorias. Formação: factor(). Exemplo:\n\nfator &lt;- factor(c(\"alto\", \"médio\", \"alto\"))"
  },
  {
    "objectID": "Aula_2.html#operadoreslógicos",
    "href": "Aula_2.html#operadoreslógicos",
    "title": "Aula 2 Mini curso R",
    "section": "OPERADORESLÓGICOS",
    "text": "OPERADORESLÓGICOS\nOs operadores lógicos em R são usados para realizar comparações e avaliar condições. Eles retornam valores lógicos: TRUE ou FALSE."
  },
  {
    "objectID": "Aula_2.html#comparação",
    "href": "Aula_2.html#comparação",
    "title": "Aula 2 Mini curso R",
    "section": "Comparação",
    "text": "Comparação\n● ==: Igualdade.\n● !=: Diferença.\n● &lt;: Menor que.\n● &gt;: Maior que.\n● &lt;=: Menor ou igual a.\n● &gt;=: Maior ou igual a."
  },
  {
    "objectID": "Aula_2.html#comparação-1",
    "href": "Aula_2.html#comparação-1",
    "title": "Aula 2 Mini curso R",
    "section": "Comparação",
    "text": "Comparação\nExemplo:\n\n x &lt;- 5\n x == 5\n\n[1] TRUE\n\n x != 3 \n\n[1] TRUE\n\n x &gt; 10 \n\n[1] FALSE"
  },
  {
    "objectID": "Aula_2.html#lógicos-booleanos",
    "href": "Aula_2.html#lógicos-booleanos",
    "title": "Aula 2 Mini curso R",
    "section": "Lógicos (Booleanos)",
    "text": "Lógicos (Booleanos)\n● &: E lógico (and).\n● |: Ou lógico (or).\n● !: Negação(not).\nExemplo:\n\n x = 7\n x &gt; 5 & x &lt; 10\n\n[1] TRUE"
  },
  {
    "objectID": "Aula_2.html#exercícios",
    "href": "Aula_2.html#exercícios",
    "title": "Aula 2 Mini curso R",
    "section": "EXERCÍCIOS",
    "text": "EXERCÍCIOS\n\nCrie um vetor chamado salarios com os valores 2500, 3000, 4000. Em seguida, multiplique todos os valores por 1.1 (aumento de 10%) e salve o resultado em um novo objeto chamado salarios_atualizados."
  },
  {
    "objectID": "Aula_2.html#exercícios-1",
    "href": "Aula_2.html#exercícios-1",
    "title": "Aula 2 Mini curso R",
    "section": "EXERCÍCIOS",
    "text": "EXERCÍCIOS\n\nCrie um vetor nomes com os valores “Ana”, “Bruno”, “Carlos”, e um vetor idades com os valores 28, 35, 40. Combine os dois em um data frame chamado funcionarios usando data.frame()."
  },
  {
    "objectID": "Aula_2.html#exercícios-2",
    "href": "Aula_2.html#exercícios-2",
    "title": "Aula 2 Mini curso R",
    "section": "EXERCÍCIOS",
    "text": "EXERCÍCIOS\n\nCombase no vetor idades criado acima, identifique se há valores que são maiores que 30."
  },
  {
    "objectID": "Aula_2.html#tipos-de-dados",
    "href": "Aula_2.html#tipos-de-dados",
    "title": "Aula 2 Mini curso R",
    "section": "Tipos de dados",
    "text": "Tipos de dados\nNumérico: armazena números, tanto inteiros quanto decimais (ponto flutuante).\n\nx &lt;- 5\n\n\nInteiro (Integer): armazena números inteiros (sem casas decimais).\n\nx &lt;- 5L #o \"L\" indica um número inteiro\n\n\n\nDouble (Ponto Flutuante de Precisão Dupla): é usado para armazenar números com casas decimais.\n\nx &lt;- 3.14\n\n\n\nLógico (Booleano): armazena valores lógicos, ou seja, TRUE ou FALSE. Usado para fazer verificações de condições ou representações binárias.\n\nflag &lt;- TRUE\n\n\n\nCaractere (String): armazena sequências de texto, ou seja, palavras ou frases. As strings são sempre cercadas por aspas, simples ou duplas.\n\nname &lt;- \"João\" \n#ou\ncity &lt;- 'São Paulo'"
  },
  {
    "objectID": "Aula_2.html#objetos-em-r-1",
    "href": "Aula_2.html#objetos-em-r-1",
    "title": "Aula 2 Mini curso R",
    "section": "Objetos em R",
    "text": "Objetos em R\nEm R, objetos são as estruturas de dados que armazenam informações, como números, textos, ou tabelas. Quase tudo em R é tratado como um objeto."
  },
  {
    "objectID": "Aula_2.html#o-que-é-um-objeto",
    "href": "Aula_2.html#o-que-é-um-objeto",
    "title": "Aula 2 Mini curso R",
    "section": "O que é um objeto?",
    "text": "O que é um objeto?\nEm R, objetos são as estruturas de dados que armazenam informações, como números, textos, ou tabelas. Quase tudo em R é tratado como um objeto."
  },
  {
    "objectID": "Aula_2.html#vetores",
    "href": "Aula_2.html#vetores",
    "title": "Aula 2 Mini curso R",
    "section": "Vetores",
    "text": "Vetores\nVetores em R são criados utilizando a função c(). Todos os elementos de um vetor devem ser do mesmo tipo. Caso os tipos sejam diferentes, R realiza uma coerção automática para unificar o tipo, seguindo a hierarquia:\n\n\nlógico &lt; inteiro &lt; double &lt; caractere.\n\n\n\n\nx &lt;- c(1, 5, 4, 9, 0)\ntypeof(x)\n\n[1] \"double\"\n\nlength(x)\n\n[1] 5\n\nx &lt;- c(1, 5.4, TRUE, \"hello\")\nx\n\n[1] \"1\"     \"5.4\"   \"TRUE\"  \"hello\"\n\ntypeof(x)\n\n[1] \"character\""
  },
  {
    "objectID": "Aula_2.html#section-1",
    "href": "Aula_2.html#section-1",
    "title": "Aula 2 Mini curso R",
    "section": "",
    "text": "Objetos em R\n\nEm R, objetos são as estruturas de dados que armazenam informações, como números, textos, ou tabelas. Quase tudo em R é tratado como um objeto."
  },
  {
    "objectID": "Aula_2.html#vetores-o-que-são",
    "href": "Aula_2.html#vetores-o-que-são",
    "title": "Aula 2 Mini curso R",
    "section": "Vetores: o que são?",
    "text": "Vetores: o que são?\nVetores em R são criados utilizando a função c(). Todos os elementos de um vetor devem ser do mesmo tipo. Caso os tipos sejam diferentes, R realiza uma coerção automática para unificar o tipo, seguindo a hierarquia:\n\n\nlógico &lt; inteiro &lt; double &lt; caractere.\n\n\n\n\nx &lt;- c(1, 5, 4, 9, 0)\ntypeof(x)\n\n[1] \"double\"\n\nlength(x)\n\n[1] 5\n\nx &lt;- c(1, 5.4, TRUE, \"hello\")\nx\n\n[1] \"1\"     \"5.4\"   \"TRUE\"  \"hello\"\n\ntypeof(x)\n\n[1] \"character\""
  },
  {
    "objectID": "Aula_2.html#como-acessar-elementos-de-um-vetor",
    "href": "Aula_2.html#como-acessar-elementos-de-um-vetor",
    "title": "Aula 2 Mini curso R",
    "section": "Como acessar elementos de um vetor?",
    "text": "Como acessar elementos de um vetor?\nOs elementos de um vetor podem ser acessados usando indexação de vetores. O vetor usado para indexação pode ser lógico, inteiro ou vetor de caracteres.\nUsando vetores inteiros como index\nO index do vector no R começa pelo 1, diferentemente da maioria das linguagens de programação em que o index do vetor começa por 0. . . .\n\nx &lt;- 1:7\n# acessando o 3º elemento\nx[3]    \n\n[1] 3\n\n# acessando o 2º e 4º elemento\nx[c(2, 4)]     \n\n[1] 2 4\n\n# acessando todos menos o 1º elemento\nx[-1]          \n\n[1] 2 3 4 5 6 7\n\n# mas não pode misturar positivos e negativos\nx[c(2, -4)]\n\nError in x[c(2, -4)]: somente 0's podem ser usados junto com subscritos negativos\n\n\nUsando vetores logicos como index\nQuando usamos vetores logicos para indexação, a posição em que o vetor logico é TRUE é retornado. . . .\n\nx &lt;- 1:5\nx[c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n\n[1] 1 4 5\n\n# filtrando com base em condições\nx[x &lt; 0] \n\ninteger(0)\n\nx[x &gt; 0]\n\n[1] 1 2 3 4 5\n\n\nUsando caracteres como index\nEsse tipo de indexação é útil para trabalhar com vetores nomeados.\n\nx &lt;- c(\"first\"=3, \"second\"=0, \"third\"=9)\nnames(x)\n\n[1] \"first\"  \"second\" \"third\" \n\nx[\"second\"]\n\nsecond \n     0"
  },
  {
    "objectID": "Aula_2.html#matrix",
    "href": "Aula_2.html#matrix",
    "title": "Aula 2 Mini curso R",
    "section": "Matrix",
    "text": "Matrix"
  },
  {
    "objectID": "Aula_2.html#operadores-aritimeticos",
    "href": "Aula_2.html#operadores-aritimeticos",
    "title": "Aula 2 Mini curso R",
    "section": "Operadores Aritimeticos",
    "text": "Operadores Aritimeticos\n\n\n\n\n\nOperador\nDescrição\n\n\n\n\n+\nadição\n\n\n-\nsubtração\n\n\n*\nmultiplicação\n\n\n/\ndivisão\n\n\n^\nexponenciação\n\n\n%%\nmódulo (x mod y)\n\n\n%/%\ndivisão inteira"
  },
  {
    "objectID": "Aula_2.html#operadores-logicos",
    "href": "Aula_2.html#operadores-logicos",
    "title": "Aula 2 Mini curso R",
    "section": "Operadores Logicos",
    "text": "Operadores Logicos\n\n\n\n\n\nOperador\nDescrição\n\n\n\n\n&lt;\nmenor que\n\n\n&lt;=\nmenor ou igual a\n\n\n&gt;\nmaior que\n\n\n&gt;=\nmaior ou igual a\n\n\n==\nexatamente igual a\n\n\n!=\ndiferente de\n\n\n!x\nnão x\n\n\n**x\nx elevado à potência de y\n\n\nx & y\nx E y (AND lógico)\n\n\nisTRUE(x)\nverifica se x é TRUE"
  },
  {
    "objectID": "Aula_2.html#exemplo-1-comparação-de-números",
    "href": "Aula_2.html#exemplo-1-comparação-de-números",
    "title": "Aula 2 Mini curso R",
    "section": "Exemplo 1: Comparação de números",
    "text": "Exemplo 1: Comparação de números\n\n# Comparação de números usando operadores lógicos\na &lt;- 5\nb &lt;- 10\n\n# Verificar se a é menor que b\na &lt; b\n\n[1] TRUE\n\n# Verificar se a é maior ou igual a b\na &gt;= b\n\n[1] FALSE\n\n# Verificar se a é exatamente igual a b\na == b\n\n[1] FALSE"
  },
  {
    "objectID": "Aula_2.html#exemplo-2-uso-do-operador-x-negação",
    "href": "Aula_2.html#exemplo-2-uso-do-operador-x-negação",
    "title": "Aula 2 Mini curso R",
    "section": "Exemplo 2: Uso do operador !x (negação)",
    "text": "Exemplo 2: Uso do operador !x (negação)\n\n# Negação de um valor lógico\nx &lt;- TRUE\ny &lt;- FALSE\n\n# Negar x\n!x\n\n[1] FALSE\n\n# Negar y\n!y\n\n[1] TRUE"
  },
  {
    "objectID": "Aula_2.html#exemplo-3-uso-de-para-operação-lógica-and",
    "href": "Aula_2.html#exemplo-3-uso-de-para-operação-lógica-and",
    "title": "Aula 2 Mini curso R",
    "section": "Exemplo 3: Uso de & para operação lógica (AND)",
    "text": "Exemplo 3: Uso de & para operação lógica (AND)\n\n# Operação lógica (AND)\nx &lt;- TRUE\ny &lt;- FALSE\n\n# Verificar se x E y\nx & y  # FALSE (pois y é FALSE)\n\n[1] FALSE\n\n# Verificar se x E TRUE\nx & TRUE  # TRUE (pois x é TRUE)\n\n[1] TRUE"
  },
  {
    "objectID": "Aula_2.html",
    "href": "Aula_2.html",
    "title": "Aula 2 Mini curso R",
    "section": "",
    "text": "Numérico: armazena números, tanto inteiros quanto decimais (ponto flutuante).\n\nx &lt;- 5\n\n. . .\nInteiro (Integer): armazena números inteiros (sem casas decimais).\n\nx &lt;- 5L #o \"L\" indica um número inteiro\n\n. . .\nDouble (Ponto Flutuante de Precisão Dupla): é usado para armazenar números com casas decimais.\n\nx &lt;- 3.14\n\n. . .\nLógico (Booleano): armazena valores lógicos, ou seja, TRUE ou FALSE. Usado para fazer verificações de condições ou representações binárias.\n\nflag &lt;- TRUE\n\n. . .\nCaractere (String): armazena sequências de texto, ou seja, palavras ou frases. As strings são sempre cercadas por aspas, simples ou duplas.\n\nname &lt;- \"João\" \n#ou\ncity &lt;- 'São Paulo'"
  },
  {
    "objectID": "Aula_3.html#dplyr",
    "href": "Aula_3.html#dplyr",
    "title": "Aula 3 - Mini Curso R",
    "section": "1. dplyr:",
    "text": "1. dplyr:\n\nPropósito: Manipulação de dados;\nPrincipais funções:\n\nfilter(): Seleciona linhas com base em condições;\nselect(): Escolhe colunas específicas;\nmutate(): Cria ou modifica colunas;\nsummarize(): Calcula estatísticas descritivas (como média e soma);\ngroup_by(): Agrupa dados para análises.\n\nDestaque: Uso de uma sintaxe clara com o operador %&gt;% (pipe);\nUso ideal: Para preparar e resumir dados de forma legível."
  },
  {
    "objectID": "Aula_3.html#ggplot2",
    "href": "Aula_3.html#ggplot2",
    "title": "Aula 3 - Mini Curso R",
    "section": "2. ggplot2",
    "text": "2. ggplot2\n\nPropósito: Visualização de dados;\nBase teórica: Baseado na gramática dos gráficos (The Grammar of Graphics);\nPrincipais funções:\n\nggplot(): Inicia o gráfico;\ngeom_point(): Gráficos de dispersão;\ngeom_bar(): Gráficos de barras;\ngeom_line(): Gráficos de linhas;\nfacet_wrap(): Divide gráficos por categorias.\n\nDestaque: Extensibilidade e personalização detalhada;\nUso ideal: Para criar gráficos esteticamente agradáveis e informativos."
  },
  {
    "objectID": "Aula_3.html#tidyr",
    "href": "Aula_3.html#tidyr",
    "title": "Aula 3 - Mini Curso R",
    "section": "3. tidyr",
    "text": "3. tidyr\n\nPropósito: Organização e transformação de dados;\nPrincipais funções:\n\npivot_longer(): Converte dados de formato largo para longo;\npivot_wider(): Converte dados de formato longo para largo;\nseparate(): Divide uma coluna em várias;\nunite(): Junta várias colunas em uma só;\n\nDestaque: Facilita a limpeza e reestruturação de dados;\nUso ideal: Para preparar dados antes de análises."
  },
  {
    "objectID": "Aula_3.html#readr",
    "href": "Aula_3.html#readr",
    "title": "Aula 3 - Mini Curso R",
    "section": "4. readr",
    "text": "4. readr\n\nPropósito: Importação de dados;\nPrincipais funções:\n\nread_csv(): Lê arquivos CSV;\nread_tsv(): Lê arquivos TSV (tab-separated values);\nwrite_csv(): Exporta dados para CSV.\n\nDestaque: Rápido, fácil de usar e com tratamento automático de tipos de dados;\nUso ideal: Para carregar arquivos de texto/tabulares no R."
  },
  {
    "objectID": "Aula_3.html#data.table",
    "href": "Aula_3.html#data.table",
    "title": "Aula 3 - Mini Curso R",
    "section": "5. data.table",
    "text": "5. data.table\n\nPropósito: Manipulação rápida de grandes datasets;\nPrincipais funções:\n\nSintaxe [i, j, by]: Combina seleção de linhas (i), operações em colunas (j) e agrupamento (by);\nfread(): Importação rápida de dados;\nsetkey(): Criação de índices para acelerar buscas;\n\nDestaque: Alta eficiência e desempenho com grandes volumes de dados;\nUso ideal: Quando o desempenho é crítico ou se trabalha com conjuntos de dados massivos."
  },
  {
    "objectID": "Aula_3.html#extra-esquisser",
    "href": "Aula_3.html#extra-esquisser",
    "title": "Aula 3 - Mini Curso R",
    "section": "6. Extra: esquisser",
    "text": "6. Extra: esquisser\n\nPropósito: Criar gráficos interativos de forma visual, sem necessidade de código, com base no pacote ggplot2.\nCaracterísticas principais:\n\nInterface gráfica para selecionar dados e personalizar gráficos.\nGera o código ggplot2 automaticamente, permitindo aprendizado e ajustes.\nSuporte a filtros e agrupamentos diretamente na interface.\n\nTipos de gráficos suportados:\n\nGráficos de barras, dispersão, linhas, histogramas e boxplots.\n\nDestaque: Ideal para iniciantes ou para criação rápida de gráficos exploratórios;\nUso ideal: Quando você quer explorar dados visualmente ou criar gráficos rápidos sem escrever código."
  },
  {
    "objectID": "Aula_3.html#importando-dados",
    "href": "Aula_3.html#importando-dados",
    "title": "Aula 3 - Mini Curso R",
    "section": "Importando dados",
    "text": "Importando dados\n\nImportante: a forma de importar depende de onde está sua base e qual a forma do arquivo.\nBaixar a base de dados “respostas.csv” que está no class;\n\nSe o arquivo estiver na pasta do repositório\n\nAdicionar na pasta do seu repositório;\ndados &lt;- read.csv(\"respostas.csv\")\nhead(dados) #visualizar as 10 primeiras linhas do data frame"
  },
  {
    "objectID": "Aula_3.html#se-o-arquivo-não-estiver-no-repositório",
    "href": "Aula_3.html#se-o-arquivo-não-estiver-no-repositório",
    "title": "Aula 3 - Mini Curso R",
    "section": "Se o arquivo não estiver no Repositório",
    "text": "Se o arquivo não estiver no Repositório\n\nCopiar o caminho\ndados &lt;- read.csv(\"/Users/beatrizmilz/Documents/Curso-R/livro-material\")\n#Forma não indicada pois impede a reprodutibilidade, BOAS PRÁTICAS\nSe o arquivo estiver em .xlsx;\nlibrary(readxl) #para importar em .xlsx ou .xls\ndados &lt;-read_xlsx(\"seu_arquivo.xlsx\")\ndados &lt;- read_excel(\"seu_arquivo.xlsx\") #auto detecta a extensão do arquivo\nExemplo: Se eu tiver uma planilha com varias abas:\ndados &lt;- read_excel(caminho_datasets, sheet = 2) #sheet indica qual a aba para importar\ndados &lt;- read_excel(caminho_datasets, sheet = 'chickwts') #com o nome da aba"
  },
  {
    "objectID": "Aula_3.html#limpeza-e-preparação",
    "href": "Aula_3.html#limpeza-e-preparação",
    "title": "Aula 3 - Mini Curso R",
    "section": "Limpeza e preparação",
    "text": "Limpeza e preparação\nNome das variáveis\nlibrary(tidyverse)\nlibrary(janitor)\nnames(dados) #visualizar os nomes das variáves\ndados &lt;- clean_names(dados) #\"limpar nomes das variáveis\nDados duplicados\n#dados duplicados\ndados[duplicated(dados), ]\nLinhas vazias\nfaltantes &lt;- is.na(dados) #matrix dos dados faltantes\napply(faltantes, 2, sum) #soma por coluna de dados faltantes\nResumo e classificação\nsummary(dados) #informações descritivas de todas as variáveis\n#outra opção\nskimr::skim(dados) #tras uma visualização completa dos dados\nstr(dados) #ver classificacao de todas as colunas\n#Alterando a classificação\ndados$Qual.sua.idade..Ex...20. &lt;- as.numeric(dados$Qual.sua.idade..Ex...20.)\n#tabela de frequência\ntabyl(dados,coluna) #mostra o percentil \ntable(dados$coluna)"
  },
  {
    "objectID": "Aula_3.html#identificar-tipo-e-classe-de-todas-as-variáveis-da-base",
    "href": "Aula_3.html#identificar-tipo-e-classe-de-todas-as-variáveis-da-base",
    "title": "Aula 3 - Mini Curso R",
    "section": "Identificar tipo e classe de todas as variáveis da base",
    "text": "Identificar tipo e classe de todas as variáveis da base\nAbaixo está a lista das funções para mudança de tipo.\n\nas.character - converte para variável texto.\nas.numeric - converte para variável número.\nas.factor - converte para variável categórica.\nas.integer - converte para variável inteiro.\nas.Date - converte para variável data.\nas.POSIXct - converte para variável data e hora completa."
  },
  {
    "objectID": "Aula_3.html#transformação-de-variáveis-quantitativas",
    "href": "Aula_3.html#transformação-de-variáveis-quantitativas",
    "title": "Aula 3 - Mini Curso R",
    "section": "Transformação de variáveis quantitativas",
    "text": "Transformação de variáveis quantitativas\nÉ possível criar novas variáveis quantitativas a partir de outras variáveis. A criação de novas variáveis pode ajudar a capturar relações complexas entre os dados e fornecer insights adicionais. Uma nova variável que pode ser criada é a razão entre saturados e aromáticos, que pode fornecer informações sobre a composição do petróleo.\n#mutate()\n#R base\ndados$novacoluna &lt;- ..."
  },
  {
    "objectID": "Aula_3.html#discretizar-dados",
    "href": "Aula_3.html#discretizar-dados",
    "title": "Aula 3 - Mini Curso R",
    "section": "Discretizar dados",
    "text": "Discretizar dados\nDependendo da natureza dos dados e das análises que vão ser realizadas, é necessário discretizar(categorizar) os dados. Nesse casos, iremos discretizar o ponto de fluidez\n#Exemplo de outro data frame\n\ndados1$ponto_de_fluidez_categoria &lt;- cut(dados1$ponto_de_fluidez,\n\n  breaks = c(-Inf, 0, 10, Inf),  # Definindo os limites das categorias\n\n  labels = c(\"Baixo\", \"Medio\", \"Alto\"),\n\n  right = TRUE  # Inclui o valor de limite superior na categoria\n\n)\nFiltrando a base de dados\nCriando um novo data frame a partir de alguma informação\ndados_jardimcamburi &lt;- dados %&gt;% filter(Bairro.onde.comprou.o.imóvel. == \"Jardim Camburi\")"
  },
  {
    "objectID": "index.html#slides-das-aulas",
    "href": "index.html#slides-das-aulas",
    "title": "Mini Curso R",
    "section": "",
    "text": "Slide 1\nSlide 2\nSlide 3"
  },
  {
    "objectID": "index.html#bases-de-dados",
    "href": "index.html#bases-de-dados",
    "title": "Mini Curso R",
    "section": "Bases de Dados",
    "text": "Bases de Dados\nBase Aula 3"
  },
  {
    "objectID": "index.html#scripts-das-aulas",
    "href": "index.html#scripts-das-aulas",
    "title": "Mini Curso R",
    "section": "Scripts das Aulas",
    "text": "Scripts das Aulas\nScript Aula 3\nScript Aula 4"
  }
]