{
  "hash": "3cbee78e8c0bacfc849234d284a78186",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Aula 1 Mini curso R\"\nauthor: \" CONSTAT - Consultoria Estatítica\"\ndate: \"2024-12-03\"\nformat: \n  revealjs:\n    transition: slide\n    theme: \"simple\"\n    css: styles.css\n    background-image: \"images/template.png\"\n    slide_number: true\n    code_block_background: false\nfontsize: 25px\neditor: visual\n---\n\n\n\n# Apresentação da CONSTAT e curso R\n\n## CONSTAT\n\nSomos a Empresa Júnior do Curso de Graduação em Estatística da UFES, que tem como finalidade proporcionar a seus membros as condições necessárias para a aplicação prática de\n\nconhecimentos teóricos relativos ao curso de Estatística e a toda área de formação, promover uma vivência empresarial e desenvolver as habilidades empreendedoras dos estudantes, sob a missão de transformar dados em resultados.\n\n-   Contato: constatufes\\@gmail.com\n\n## Serviços prestados\n\n-   Engenharia de dados;\n\n-   Modelo de regressão preditivo;\n\n-   Censos de qualquer natureza;\n\n-   Pesquisa de mercado;\n\n-   Limpeza de dados;\n\n-   Análise descritiva;\n\n-   Planejamento amostral;\n\n-   Análise de regressão.\n\n------------------------------------------------------------------------\n\n## Curso R\n\n### Estrutura das aulas\n\n1.  Teoria;\n\n2.  Exercícios;\n\n3.  Dúvidas lista/ aula anterior.\n\n### Trabalho e certificado\n\nO certificado será liberado após a entrega do trabalho.\n\n**Trabalho**\n\nO trabalho consiste em entregar uma análise de um banco de dados usando os ítens aprendidos em aula.\n\n# Introdução ao R e ao RStudio\n\n-   **R**: Linguagem de programação focada em análise estatística e ciência de dados, além de um ambiente de software gratuito.\n\n-   Saiba mais em: [r-project.org](https://www.r-project.org/about.html)\n\n-   **RStudio**: Ambiente de desenvolvimento integrado (IDE) para R.\n\n-   O R, em combinação com o RStudio, possui um conjunto de funcionalidades cuja intenção é ajudar no processo de desenvolvimento\n\n-   **Recursos**: Scripts, pacotes, visualizações, Interface amigável para programadores e estatísticos.\n\n-   Saiba mais em: <https://rstudio.com/>\n\n------------------------------------------------------------------------\n\n## Utilização do RStudio\n\n-   Criação análises;\n\n-   Rmarkdown: Relatórios em PDF, HTML, Word;\n\n-   Quarto: Apresentações em PDF, HTML;\n\n-   Shiny: dashboard;\n\n-   Outros.\n\n## R\n\n![](images/Captura%20de%20tela%202024-12-03%20143747.png){fig-align=\"center\"}\n\n## RStudio\n\n![](images/Captura%20de%20tela%202024-12-03%20143909.png){fig-align=\"center\"}\n\n## Telas\n\n-   **Editor/Scripts**: É onde escrever os códigos. Arquivos do tipo .R.\n\n-   **Console**: Executar os comandos e ver os resultados.\n\n-   **Enviroment**: Painel com todos os objetos criados.\n\n-   **History**: História dos comandos executados.\n\n-   **Files**: Navegar em pastas e arquivos.\n\n-   **Plots**: Onde os gráficos serão apresentados.\n\n-   **Packages**: Pacotes instalados (sem ticar) e habilitados (ticados).\n\n-   **Help**: Retorna o tutorial de ajuda do comando solicitado com help() ou ?comando. Veremos melhor como pedir ajuda no R ainda nessa aula.\n\n## Back-end VS Front-end\n\n**Front-end** é a parte que os usuários veem e interagem, **back-end** é a parte que faz o programa funcionar\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](front_end.png){width=45%}\n:::\n\n::: {.cell-output-display}\n![](back_end.png){width=45%}\n:::\n:::\n\n\n\n# Boas práticas\n\n-   Comente bem o seu código: É possível fazer comentários usando o símbolo ‘#’. É sempre bom explicar o que uma variável armazena, o que uma função faz, porque alguns parâmetros são passados para uma determinada função, qual é o objetivo de um trecho de código, etc.\n\n-   Evite linhas de código muito longas: Usar linhas de código mais curtas ajuda na leitura do código.\n\n-   Escreva um código organizado: Por exemplo, adote um padrão no uso de minúsculas e maiúsculas, uma lógica única na organização de pastas e arquivos, pode ser adotada uma breve descrição (como comentário) indicando o que um determinado script faz.\n\n-   Carregue todos os pacotes que irá usar sempre no início do arquivo: Quando alguém abrir o seu código será fácil identificar quais são os pacotes que devem ser instalados e quais dependências podem existir.\n\n-   Evite referência de caminho que considere seu computador ou usuário: Faça referência ao caminho do projeto.\n\n# Criando um projeto:\n\nNo RStudio, para criar um projeto, clique no Menu `File,` deopis em `New Project...` . Na caixa de diálogo que aparecerá, clique em `New Directory` para criar o projeto em uma nova pasta ou `Existing Directory` para criar em uma pasta existente.\n\nCriando um projeto, o RStudio criará na pasta escolhida um arquivo `nome-do-projeto.Rproj`\n\n[**Exemplificando.....**]{.underline}\n\n# Atalhos no RStudio\n\n-   **CTRL+ENTER**: roda a(s) linha(s) selecionada(s) no script. O atalho mais utilizado.\n\n-   **ALT+-**: cria no script um sinal de atribuição (\\<-). Você o usará o tempo todo.\n\n-   **CTRL+SHIFT+M**: (%\\>%) operador *pipe*.\n\n-   **CTRL+1**: altera cursor para o script.\n\n-   **CTRL+2**: altera cursor para o console.\n\n-   **CTRL+ALT+I**: cria um chunk no R Markdown.\n\n-   **CTRL+SHIFT+K**: compila um arquivo no R Markdown.\n\n-   [**ALT+SHIFT+K**]{.underline}: janela com todos os atalhos disponíveis.\n\n# Tipos de dados\n\n-   **Numeric**: números que podem ser tanto inteiros quanto decimais. (5; 3.2; 6.8)\n\n-   **Integer**: Especificamente números inteiros.(1, 2, 7)\n\n-   **Character**: Representa textos ou cadeias de caracteres. (\"CONSTAT\", \"2\", \"UFES\")\n\n-   **Logical**: Representa valores booleanos, TRUE ou FALSE.\n\n# R como Calculadora\n\n**O R pode realizar operações matemáticas básicas**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Soma\n2 + 2 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n#Subtração\n5 - 3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n#Multiplicação\n3 * 3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\n#Divisão\n10 / 2 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# potência\n4 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n\n```{.r .cell-code}\n# resto da divisão de 5 por 3\n5 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# parte inteira da divisão de 5 por 3\n5 %/% 3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n# Atribuição\n\n\"Guardar\" ítens e/ou valores em objetos\n\nPara criar um objeto, utilizamos o operador `<-` (Alt-)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Atribuição usando \"<-\"\nx <- 10\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n#Atribuição usando \"=\"\ny = 20\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n\n```{.r .cell-code}\n#Soma dos valores atribuídos\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n\n\n**Atenção!**\n\nO R **diferencia letras maiúsculas e minúsculas**, isto é, `b` é considerado um objeto diferente de `B`\n\n------------------------------------------------------------------------\n\n## Objetos em R\n\nExistem cinco classes básicas no R:\n\n-   character: \"UAH!\"\n\n-   numeric: 0.95 (números reais)\n\n-   integer: 100515 (inteiros)\n\n-   complex: 2 + 5i (números complexos, a + bi)\n\n-   logical: TRUE (booleanos, TRUE/FALSE)\n\n## Exemplo\n\nVamos atribuir a x a string banana.\n\n```         \nx <- banana\n```\n\n```         \nErro: objeto 'banana' não encontrado\n```\n\n```         \nx <- \"banana\"\nx\n```\n\n```         \n[1] \"banana\"\n```\n\n# Função\n\nA sintaxe para usar uma função é a seguinte:\n\n```         \nnome_da_funcao(arg1, arg2, argn)\n```\n\nCada função tem sua própia sintaxe, para saber mais, basta usar o help\n\n## Função class()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- \"ola\"\n\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2.5\n\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n## Exemplo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeros <- c(10, 20, 30, 40) \n\nmean(numeros) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfrutas <- c(\"Maçã\", \"Banana\", \"Laranja\", \"Uva\")\n# Complete o código abaixo:\nqtd <- length(frutas)\nprint(qtd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nanimais <- c(\"Gato\", \"Cachorro\", \"Gato\", \"Passarinho\", \"Gato\", \"Cachorro\")\n# Complete o código:\nfrequencia <- table(animais)\nprint(frequencia)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nanimais\n  Cachorro       Gato Passarinho \n         2          3          1 \n```\n\n\n:::\n:::\n\n\n\n# Classificação dos dados\n\n## **Numérico (numeric)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 4.5 # O . é o separador decimal\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.5\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.numeric(x) # Confere se o objeto é um da classe numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ny<-1E4 # Notação científica\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10000\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.numeric(y) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## **Caracter (character)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"floresta\" # Sempre entre aspas \nx \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"floresta\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.character(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ny <- \"Diversidade (Simpson)\" # Pode conter espaços ou acentos \ny \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Diversidade (Simpson)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(y) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.character(y) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## **Lógico (logical)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE # Não precisa estar entre aspas, é uma palavra especial no R\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.logical(x) # Confere se o objeto é um da classe logical\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ny <- F # Pode ser abreviada\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.logical(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n# Atividade\n\nDiga por que esses códigos deram erro\n\n1\\)\n\n```         \nx <- \"Constat\"\n\nX\n```\n\n```         \nErro: objeto 'X' não encontrado \n```\n\n2\\)\n\n```         \nresultado <- sum(1, 2, \"3\")\n```\n\n```         \nError in sum(1, 2, \"3\") : 'type' inválido (character) do argumento\n```\n\n3\\) Atribua o ano em que nasceu e o ano atual a objetos e descubra sua idade;\n\n4\\) Escreva o código que resolva a equação y=3x + 5 para x=4 e depois altere o valor de x para sua idade.\n\n------------------------------------------------------------------------\n\n# Agradecimentos\n\nObrigado pela participação e nos vemos na próxima aula. não esqueça de nos seguir nas redes sociais.\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}